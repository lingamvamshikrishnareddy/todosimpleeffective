{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\todo list\\\\frontend\\\\src\\\\components\\\\TaskKanban.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { DndContext, PointerSensor, useSensor, useSensors, DragOverlay } from '@dnd-kit/core';\nimport { SortableContext, verticalListSortingStrategy, arrayMove } from '@dnd-kit/sortable';\nimport { restrictToWindowEdges } from '@dnd-kit/modifiers';\nimport KanbanColumn from './KanbanColumn';\nimport SortableTask from './SortableTask';\nimport './TaskKanban.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskKanban = ({\n  tasks,\n  onEdit,\n  onDelete,\n  onStatusChange\n}) => {\n  _s();\n  const [activeTask, setActiveTask] = React.useState(null);\n\n  // Group tasks by status\n  const [columns, setColumns] = React.useState({\n    backlog: {\n      id: 'backlog',\n      title: 'Backlog',\n      taskIds: []\n    },\n    active: {\n      id: 'active',\n      title: 'Active',\n      taskIds: []\n    },\n    'under-review': {\n      id: 'under-review',\n      title: 'Under Review',\n      taskIds: []\n    },\n    completed: {\n      id: 'completed',\n      title: 'Completed',\n      taskIds: []\n    }\n  });\n\n  // Setup sensors for drag detection with proper activation constraints\n  const sensors = useSensors(useSensor(PointerSensor, {\n    activationConstraint: {\n      distance: 8,\n      // Increase distance to avoid accidental drags\n      tolerance: 5 // Add tolerance for slight movements\n    }\n  }));\n\n  // Initialize columns with tasks\n  React.useEffect(() => {\n    const newColumns = {\n      backlog: {\n        id: 'backlog',\n        title: 'Backlog',\n        taskIds: []\n      },\n      active: {\n        id: 'active',\n        title: 'Active',\n        taskIds: []\n      },\n      'under-review': {\n        id: 'under-review',\n        title: 'Under Review',\n        taskIds: []\n      },\n      completed: {\n        id: 'completed',\n        title: 'Completed',\n        taskIds: []\n      }\n    };\n    tasks.forEach(task => {\n      const taskId = task._id || task.id;\n\n      // Map API status to our columns\n      let columnId;\n      switch (task.status) {\n        case 'completed':\n          columnId = 'completed';\n          break;\n        case 'under-review':\n          columnId = 'under-review';\n          break;\n        case 'backlog':\n          columnId = 'backlog';\n          break;\n        case 'active':\n        default:\n          columnId = 'active';\n          break;\n      }\n\n      // Make sure column exists before pushing\n      if (newColumns[columnId]) {\n        newColumns[columnId].taskIds.push(taskId);\n      } else {\n        // Fallback to active if column doesn't exist\n        newColumns.active.taskIds.push(taskId);\n      }\n    });\n    setColumns(newColumns);\n  }, [tasks]);\n\n  // Find task by ID helper\n  const getTaskById = React.useCallback(id => {\n    return tasks.find(task => (task._id || task.id) === id);\n  }, [tasks]);\n\n  // Handle drag start\n  const handleDragStart = event => {\n    const {\n      active\n    } = event;\n    const taskId = active.id;\n    setActiveTask(getTaskById(taskId));\n  };\n\n  // Handle drag end - update columns and call API\n  const handleDragEnd = event => {\n    const {\n      active,\n      over\n    } = event;\n\n    // Exit if no over target\n    if (!over) {\n      setActiveTask(null);\n      return;\n    }\n    const taskId = active.id;\n\n    // Find source column\n    const sourceColumnId = Object.keys(columns).find(colId => columns[colId].taskIds.includes(taskId));\n\n    // Determine destination column - if over a column, use that column's ID\n    let destinationColumnId;\n    if (over.id.startsWith('column:')) {\n      // Dropped on a column\n      destinationColumnId = over.id.replace('column:', '');\n    } else {\n      // Dropped on another task, find its column\n      destinationColumnId = Object.keys(columns).find(colId => columns[colId].taskIds.includes(over.id));\n\n      // If we couldn't find it, use the source column\n      if (!destinationColumnId) {\n        destinationColumnId = sourceColumnId;\n      }\n    }\n\n    // If task was dropped in a different column\n    if (sourceColumnId !== destinationColumnId) {\n      setColumns(prevColumns => {\n        // Remove from source column\n        const sourceTaskIds = [...prevColumns[sourceColumnId].taskIds];\n        const taskIndex = sourceTaskIds.indexOf(taskId);\n        sourceTaskIds.splice(taskIndex, 1);\n\n        // Add to destination column\n        const destinationTaskIds = [...prevColumns[destinationColumnId].taskIds];\n\n        // If dropped on another task, find its position\n        if (over.id !== `column:${destinationColumnId}` && destinationTaskIds.includes(over.id)) {\n          const overIndex = destinationTaskIds.indexOf(over.id);\n          destinationTaskIds.splice(overIndex, 0, taskId);\n        } else {\n          // Otherwise add to the end\n          destinationTaskIds.push(taskId);\n        }\n        return {\n          ...prevColumns,\n          [sourceColumnId]: {\n            ...prevColumns[sourceColumnId],\n            taskIds: sourceTaskIds\n          },\n          [destinationColumnId]: {\n            ...prevColumns[destinationColumnId],\n            taskIds: destinationTaskIds\n          }\n        };\n      });\n\n      // Map column id back to API status\n      let newStatus;\n      switch (destinationColumnId) {\n        case 'completed':\n          newStatus = 'completed';\n          break;\n        case 'under-review':\n          newStatus = 'under-review';\n          break;\n        case 'backlog':\n          newStatus = 'backlog';\n          break;\n        case 'active':\n        default:\n          newStatus = 'active';\n          break;\n      }\n\n      // Call API to update task status\n      onStatusChange(taskId, newStatus);\n    } else if (over.id !== taskId && over.id !== `column:${sourceColumnId}`) {\n      // Reordering within the same column\n      setColumns(prevColumns => {\n        const columnTaskIds = [...prevColumns[sourceColumnId].taskIds];\n        const currentIndex = columnTaskIds.indexOf(taskId);\n        const targetIndex = columnTaskIds.indexOf(over.id);\n        if (currentIndex !== -1 && targetIndex !== -1) {\n          // Move the item within the array\n          const newTaskIds = arrayMove(columnTaskIds, currentIndex, targetIndex);\n          return {\n            ...prevColumns,\n            [sourceColumnId]: {\n              ...prevColumns[sourceColumnId],\n              taskIds: newTaskIds\n            }\n          };\n        }\n        return prevColumns;\n      });\n    }\n    setActiveTask(null);\n  };\n  return /*#__PURE__*/_jsxDEV(DndContext, {\n    sensors: sensors,\n    onDragStart: handleDragStart,\n    onDragEnd: handleDragEnd,\n    modifiers: [restrictToWindowEdges],\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"kanban-board\",\n      children: Object.values(columns).map(column => /*#__PURE__*/_jsxDEV(KanbanColumn, {\n        id: column.id,\n        title: column.title,\n        taskIds: column.taskIds,\n        tasks: tasks,\n        getTaskById: getTaskById,\n        onEdit: onEdit,\n        onDelete: onDelete\n      }, column.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DragOverlay, {\n      children: activeTask ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"task-card dragging\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"task-card-header\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"task-card-title\",\n            children: activeTask.title || activeTask.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 13\n        }, this), activeTask.description && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"task-card-description\",\n          children: activeTask.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 15\n        }, this), (activeTask.category || activeTask.dueDate) && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"task-card-footer\",\n          children: [activeTask.category && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"task-category\",\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fa fa-tag\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 265,\n              columnNumber: 21\n            }, this), \" \", activeTask.category]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 19\n          }, this), activeTask.dueDate && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"task-due-date\",\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fa fa-calendar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 21\n            }, this), \" \", new Date(activeTask.dueDate).toLocaleDateString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 11\n      }, this) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 232,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskKanban, \"WRwXY3bMpTm22WsyH6pAGoelFiw=\", false, function () {\n  return [useSensors, useSensor];\n});\n_c = TaskKanban;\nexport default TaskKanban;\nvar _c;\n$RefreshReg$(_c, \"TaskKanban\");","map":{"version":3,"names":["React","DndContext","PointerSensor","useSensor","useSensors","DragOverlay","SortableContext","verticalListSortingStrategy","arrayMove","restrictToWindowEdges","KanbanColumn","SortableTask","jsxDEV","_jsxDEV","TaskKanban","tasks","onEdit","onDelete","onStatusChange","_s","activeTask","setActiveTask","useState","columns","setColumns","backlog","id","title","taskIds","active","completed","sensors","activationConstraint","distance","tolerance","useEffect","newColumns","forEach","task","taskId","_id","columnId","status","push","getTaskById","useCallback","find","handleDragStart","event","handleDragEnd","over","sourceColumnId","Object","keys","colId","includes","destinationColumnId","startsWith","replace","prevColumns","sourceTaskIds","taskIndex","indexOf","splice","destinationTaskIds","overIndex","newStatus","columnTaskIds","currentIndex","targetIndex","newTaskIds","onDragStart","onDragEnd","modifiers","children","className","values","map","column","fileName","_jsxFileName","lineNumber","columnNumber","text","description","category","dueDate","Date","toLocaleDateString","_c","$RefreshReg$"],"sources":["D:/Projects/todo list/frontend/src/components/TaskKanban.js"],"sourcesContent":["import React from 'react';\r\nimport { DndContext, PointerSensor, useSensor, useSensors, DragOverlay } from '@dnd-kit/core';\r\nimport { SortableContext, verticalListSortingStrategy, arrayMove } from '@dnd-kit/sortable';\r\nimport { restrictToWindowEdges } from '@dnd-kit/modifiers';\r\nimport KanbanColumn from './KanbanColumn';\r\nimport SortableTask from './SortableTask';\r\nimport './TaskKanban.css';\r\n\r\nconst TaskKanban = ({ tasks, onEdit, onDelete, onStatusChange }) => {\r\n  const [activeTask, setActiveTask] = React.useState(null);\r\n  \r\n  // Group tasks by status\r\n  const [columns, setColumns] = React.useState({\r\n    backlog: {\r\n      id: 'backlog',\r\n      title: 'Backlog',\r\n      taskIds: []\r\n    },\r\n    active: {\r\n      id: 'active',\r\n      title: 'Active',\r\n      taskIds: []\r\n    },\r\n    'under-review': {\r\n      id: 'under-review',\r\n      title: 'Under Review',\r\n      taskIds: []\r\n    },\r\n    completed: {\r\n      id: 'completed',\r\n      title: 'Completed',\r\n      taskIds: []\r\n    }\r\n  });\r\n\r\n  // Setup sensors for drag detection with proper activation constraints\r\n  const sensors = useSensors(\r\n    useSensor(PointerSensor, {\r\n      activationConstraint: {\r\n        distance: 8, // Increase distance to avoid accidental drags\r\n        tolerance: 5, // Add tolerance for slight movements\r\n      },\r\n    })\r\n  );\r\n\r\n  // Initialize columns with tasks\r\n  React.useEffect(() => {\r\n    const newColumns = {\r\n      backlog: {\r\n        id: 'backlog',\r\n        title: 'Backlog',\r\n        taskIds: []\r\n      },\r\n      active: {\r\n        id: 'active',\r\n        title: 'Active',\r\n        taskIds: []\r\n      },\r\n      'under-review': {\r\n        id: 'under-review',\r\n        title: 'Under Review',\r\n        taskIds: []\r\n      },\r\n      completed: {\r\n        id: 'completed',\r\n        title: 'Completed',\r\n        taskIds: []\r\n      }\r\n    };\r\n    \r\n    tasks.forEach(task => {\r\n      const taskId = task._id || task.id;\r\n      \r\n      // Map API status to our columns\r\n      let columnId;\r\n      switch(task.status) {\r\n        case 'completed':\r\n          columnId = 'completed';\r\n          break;\r\n        case 'under-review':\r\n          columnId = 'under-review';\r\n          break;\r\n        case 'backlog':\r\n          columnId = 'backlog';\r\n          break;\r\n        case 'active':\r\n        default:\r\n          columnId = 'active';\r\n          break;\r\n      }\r\n      \r\n      // Make sure column exists before pushing\r\n      if (newColumns[columnId]) {\r\n        newColumns[columnId].taskIds.push(taskId);\r\n      } else {\r\n        // Fallback to active if column doesn't exist\r\n        newColumns.active.taskIds.push(taskId);\r\n      }\r\n    });\r\n    \r\n    setColumns(newColumns);\r\n  }, [tasks]);\r\n\r\n  // Find task by ID helper\r\n  const getTaskById = React.useCallback((id) => {\r\n    return tasks.find(task => (task._id || task.id) === id);\r\n  }, [tasks]);\r\n\r\n  // Handle drag start\r\n  const handleDragStart = (event) => {\r\n    const { active } = event;\r\n    const taskId = active.id;\r\n    setActiveTask(getTaskById(taskId));\r\n  };\r\n\r\n  // Handle drag end - update columns and call API\r\n  const handleDragEnd = (event) => {\r\n    const { active, over } = event;\r\n    \r\n    // Exit if no over target\r\n    if (!over) {\r\n      setActiveTask(null);\r\n      return;\r\n    }\r\n    \r\n    const taskId = active.id;\r\n    \r\n    // Find source column\r\n    const sourceColumnId = Object.keys(columns).find(\r\n      colId => columns[colId].taskIds.includes(taskId)\r\n    );\r\n    \r\n    // Determine destination column - if over a column, use that column's ID\r\n    let destinationColumnId;\r\n    \r\n    if (over.id.startsWith('column:')) {\r\n      // Dropped on a column\r\n      destinationColumnId = over.id.replace('column:', '');\r\n    } else {\r\n      // Dropped on another task, find its column\r\n      destinationColumnId = Object.keys(columns).find(\r\n        colId => columns[colId].taskIds.includes(over.id)\r\n      );\r\n      \r\n      // If we couldn't find it, use the source column\r\n      if (!destinationColumnId) {\r\n        destinationColumnId = sourceColumnId;\r\n      }\r\n    }\r\n    \r\n    // If task was dropped in a different column\r\n    if (sourceColumnId !== destinationColumnId) {\r\n      setColumns(prevColumns => {\r\n        // Remove from source column\r\n        const sourceTaskIds = [...prevColumns[sourceColumnId].taskIds];\r\n        const taskIndex = sourceTaskIds.indexOf(taskId);\r\n        sourceTaskIds.splice(taskIndex, 1);\r\n        \r\n        // Add to destination column\r\n        const destinationTaskIds = [...prevColumns[destinationColumnId].taskIds];\r\n        \r\n        // If dropped on another task, find its position\r\n        if (over.id !== `column:${destinationColumnId}` && destinationTaskIds.includes(over.id)) {\r\n          const overIndex = destinationTaskIds.indexOf(over.id);\r\n          destinationTaskIds.splice(overIndex, 0, taskId);\r\n        } else {\r\n          // Otherwise add to the end\r\n          destinationTaskIds.push(taskId);\r\n        }\r\n        \r\n        return {\r\n          ...prevColumns,\r\n          [sourceColumnId]: {\r\n            ...prevColumns[sourceColumnId],\r\n            taskIds: sourceTaskIds\r\n          },\r\n          [destinationColumnId]: {\r\n            ...prevColumns[destinationColumnId],\r\n            taskIds: destinationTaskIds\r\n          }\r\n        };\r\n      });\r\n      \r\n      // Map column id back to API status\r\n      let newStatus;\r\n      switch(destinationColumnId) {\r\n        case 'completed':\r\n          newStatus = 'completed';\r\n          break;\r\n        case 'under-review':\r\n          newStatus = 'under-review';\r\n          break;\r\n        case 'backlog':\r\n          newStatus = 'backlog';\r\n          break;\r\n        case 'active':\r\n        default:\r\n          newStatus = 'active';\r\n          break;\r\n      }\r\n      \r\n      // Call API to update task status\r\n      onStatusChange(taskId, newStatus);\r\n    } else if (over.id !== taskId && over.id !== `column:${sourceColumnId}`) {\r\n      // Reordering within the same column\r\n      setColumns(prevColumns => {\r\n        const columnTaskIds = [...prevColumns[sourceColumnId].taskIds];\r\n        const currentIndex = columnTaskIds.indexOf(taskId);\r\n        const targetIndex = columnTaskIds.indexOf(over.id);\r\n        \r\n        if (currentIndex !== -1 && targetIndex !== -1) {\r\n          // Move the item within the array\r\n          const newTaskIds = arrayMove(columnTaskIds, currentIndex, targetIndex);\r\n          \r\n          return {\r\n            ...prevColumns,\r\n            [sourceColumnId]: {\r\n              ...prevColumns[sourceColumnId],\r\n              taskIds: newTaskIds\r\n            }\r\n          };\r\n        }\r\n        \r\n        return prevColumns;\r\n      });\r\n    }\r\n    \r\n    setActiveTask(null);\r\n  };\r\n\r\n  return (\r\n    <DndContext\r\n      sensors={sensors}\r\n      onDragStart={handleDragStart}\r\n      onDragEnd={handleDragEnd}\r\n      modifiers={[restrictToWindowEdges]}\r\n    >\r\n      <div className=\"kanban-board\">\r\n        {Object.values(columns).map(column => (\r\n          <KanbanColumn\r\n            key={column.id}\r\n            id={column.id}\r\n            title={column.title}\r\n            taskIds={column.taskIds}\r\n            tasks={tasks}\r\n            getTaskById={getTaskById}\r\n            onEdit={onEdit}\r\n            onDelete={onDelete}\r\n          />\r\n        ))}\r\n      </div>\r\n      <DragOverlay>\r\n        {activeTask ? (\r\n          <div className=\"task-card dragging\">\r\n            <div className=\"task-card-header\">\r\n              <h3 className=\"task-card-title\">{activeTask.title || activeTask.text}</h3>\r\n            </div>\r\n            {activeTask.description && (\r\n              <p className=\"task-card-description\">{activeTask.description}</p>\r\n            )}\r\n            {(activeTask.category || activeTask.dueDate) && (\r\n              <div className=\"task-card-footer\">\r\n                {activeTask.category && (\r\n                  <span className=\"task-category\">\r\n                    <i className=\"fa fa-tag\"></i> {activeTask.category}\r\n                  </span>\r\n                )}\r\n                {activeTask.dueDate && (\r\n                  <span className=\"task-due-date\">\r\n                    <i className=\"fa fa-calendar\"></i> {new Date(activeTask.dueDate).toLocaleDateString()}\r\n                  </span>\r\n                )}\r\n              </div>\r\n            )}\r\n          </div>\r\n        ) : null}\r\n      </DragOverlay>\r\n    </DndContext>\r\n  );\r\n};\r\n\r\nexport default TaskKanban;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}