{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\todo list\\\\frontend\\\\src\\\\App.js\";\nimport React from 'react';\nimport { BrowserRouter as Router, Route, Switch,\n// Import Switch for exclusive routing\nRedirect // Import Redirect for private routes and default behavior\n} from 'react-router-dom';\n\n// --- Page Imports ---\nimport HomePage from './pages/HomePage'; // Assuming you still want this for a public landing page\nimport LoginPage from './pages/LoginPage';\nimport RegisterPage from './pages/RegisterPage';\nimport TaskPage from './pages/TaskPage'; // This should likely be private\nimport ForgotPasswordPage from './pages/ForgotPasswordPage';\n// Import the reset page\n\n// --- Service Imports (needed for auth check in PrivateRoute) ---\nimport api from './services/api'; // Make sure this path is correct\n\n// --- Styles ---\nimport './styles/styles.css'; // Assuming this is your main stylesheet\n\n// --- Private Route Component ---\n// This component checks if the user is authenticated.\n// If yes, it renders the requested component (e.g., TaskPage).\n// If no, it redirects the user to the login page.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PrivateRoute = ({\n  component: Component,\n  ...rest\n}) => /*#__PURE__*/_jsxDEV(Route, {\n  ...rest,\n  render: props => api.auth.isAuthenticated() ?\n  /*#__PURE__*/\n  // Use your actual auth check logic here\n  _jsxDEV(Component, {\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n    to: {\n      pathname: '/login',\n      // Pass the current location so we can redirect back after login\n      state: {\n        from: props.location,\n        sessionExpired: true\n      } // Optional: pass state like sessionExpired\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 28,\n  columnNumber: 3\n}, this);\n\n// --- App Component ---\n_c = PrivateRoute;\nconst App = () => {\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(Switch, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        component: HomePage,\n        exact: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/login\",\n        component: LoginPage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/register\",\n        component: RegisterPage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/forgot-password\",\n        component: ForgotPasswordPage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PrivateRoute, {\n        path: \"/tasks\",\n        component: TaskPage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"*\",\n        children: api.auth.isAuthenticated() ? /*#__PURE__*/_jsxDEV(Redirect, {\n          to: \"/tasks\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 42\n        }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n          to: \"/login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 69\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"PrivateRoute\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","BrowserRouter","Router","Route","Switch","Redirect","HomePage","LoginPage","RegisterPage","TaskPage","ForgotPasswordPage","api","jsxDEV","_jsxDEV","PrivateRoute","component","Component","rest","render","props","auth","isAuthenticated","fileName","_jsxFileName","lineNumber","columnNumber","to","pathname","state","from","location","sessionExpired","_c","App","children","path","exact","_c2","$RefreshReg$"],"sources":["D:/Projects/todo list/frontend/src/App.js"],"sourcesContent":["import React from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Switch, // Import Switch for exclusive routing\r\n  Redirect // Import Redirect for private routes and default behavior\r\n} from 'react-router-dom';\r\n\r\n// --- Page Imports ---\r\nimport HomePage from './pages/HomePage'; // Assuming you still want this for a public landing page\r\nimport LoginPage from './pages/LoginPage';\r\nimport RegisterPage from './pages/RegisterPage';\r\nimport TaskPage from './pages/TaskPage'; // This should likely be private\r\nimport ForgotPasswordPage from './pages/ForgotPasswordPage';\r\n// Import the reset page\r\n\r\n// --- Service Imports (needed for auth check in PrivateRoute) ---\r\nimport api from './services/api'; // Make sure this path is correct\r\n\r\n// --- Styles ---\r\nimport './styles/styles.css'; // Assuming this is your main stylesheet\r\n\r\n// --- Private Route Component ---\r\n// This component checks if the user is authenticated.\r\n// If yes, it renders the requested component (e.g., TaskPage).\r\n// If no, it redirects the user to the login page.\r\nconst PrivateRoute = ({ component: Component, ...rest }) => (\r\n  <Route\r\n    {...rest}\r\n    render={props =>\r\n      api.auth.isAuthenticated() ? ( // Use your actual auth check logic here\r\n        <Component {...props} />\r\n      ) : (\r\n        <Redirect\r\n          to={{\r\n            pathname: '/login',\r\n            // Pass the current location so we can redirect back after login\r\n            state: { from: props.location, sessionExpired: true } // Optional: pass state like sessionExpired\r\n          }}\r\n        />\r\n      )\r\n    }\r\n  />\r\n);\r\n\r\n\r\n// --- App Component ---\r\nconst App = () => {\r\n  return (\r\n    <Router>\r\n      {/* Switch renders the *first* route that matches */}\r\n      <Switch>\r\n        {/* Public Routes */}\r\n        {/* Consider if HomePage is truly needed or if '/' should redirect */}\r\n        <Route path=\"/\" component={HomePage} exact />\r\n        <Route path=\"/login\" component={LoginPage} />\r\n        <Route path=\"/register\" component={RegisterPage} />\r\n        {/* Standardize path to kebab-case */}\r\n        <Route path=\"/forgot-password\" component={ForgotPasswordPage} />\r\n        {/* Route for the actual password reset page (requires token) */}\r\n      \r\n\r\n        {/* Private Routes */}\r\n        {/* Use the PrivateRoute component for pages requiring authentication */}\r\n        <PrivateRoute path=\"/tasks\" component={TaskPage} />\r\n\r\n        {/* Fallback Redirect (Optional but recommended) */}\r\n        {/* If no other route matches, redirect based on auth status */}\r\n        <Route path=\"*\">\r\n           {api.auth.isAuthenticated() ? <Redirect to=\"/tasks\" /> : <Redirect to=\"/login\" />}\r\n           {/* Or redirect to a dedicated 404 page */}\r\n           {/* <NotFoundPage /> */}\r\n        </Route>\r\n\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}